name: Deploy Django App to EC2 using Docker Compose

on:
  push:
    branches:
      - main  # Trigger deployment when changes are pushed to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 4: Build Docker Compose services
      - name: Build Docker Compose services
        run: |
          docker-compose -f docker-compose.yml build

      # Step 5: SSH into EC2 and deploy
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Step 6: Pull the latest code from GitHub
            cd /app
            git pull origin main

            # Step 7: Ensure Docker Compose is installed (Optional if already installed)
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Step 8: Build the Docker Compose services
            docker-compose -f /app/docker-compose.yml build

            # Step 9: Stop and remove the old container(s)
            docker-compose -f /app/docker-compose.yml down

            # Step 10: Run Docker Compose to start the services
            docker-compose -f /app/docker-compose.yml up -d
